version: '3'
services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
      - '2888:2888'
      - '3888:3888'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - 'zookeeper_data:/bitnami/zookeeper/data'
      - 'zookeeper_logs:/bitnami/zookeeper/logs'

  kafka-0:
    image: 'bitnami/kafka:latest'
    ports:
      - '9093:9093'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,OUTSIDE://0.0.0.0:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-0:9092,OUTSIDE://localhost:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_CFG_BROKER_ID=0
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true # Enable automatic topic creation
    volumes:
      - 'kafka-0-data:/bitnami/kafka'
    depends_on:
      - zookeeper

  kafka-1:
    image: 'bitnami/kafka:latest'
    ports:
      - '9094:9094'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,OUTSIDE://0.0.0.0:9094
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092,OUTSIDE://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true # Enable automatic topic creation
    volumes:
      - 'kafka-1-data:/bitnami/kafka'
    depends_on:
      - zookeeper

  kafka-2:
    image: 'bitnami/kafka:latest'
    ports:
      - '9095:9095'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,OUTSIDE://0.0.0.0:9095
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092,OUTSIDE://localhost:9095
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_CFG_BROKER_ID=2
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true # Enable automatic topic creation
    volumes:
      - 'kafka-2-data:/bitnami/kafka'
    depends_on:
      - zookeeper


  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka-0:9092,kafka-1:9092,kafka-2:9092"
    depends_on:
      - kafka-0
      - kafka-1
      - kafka-2

  schema-registry:
    image: docker.io/bitnami/schema-registry:7.3
    ports:
      - "8081:8081"
    depends_on:
      - kafka-0
      - kafka-1
      - kafka-2
    environment:
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
      - SCHEMA_REGISTRY_KAFKA_BROKERS=PLAINTEXT://kafka-0:9092,PLAINTEXT://kafka-1:9092,PLAINTEXT://kafka-2:9092
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry


  connect:
    image: debezium/connect:2.5
    hostname: connect
    container_name: connect
    depends_on:
      - kafka-0
      - kafka-1
      - kafka-2
      - schema-registry
      - postgres
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: "kafka-0:9092,kafka-1:9092,kafka-2:9092"
      ADVERTISED_PORT: 8083
      ADVERTISED_HOST_NAME: "kafka-connect"
      GROUP_ID: compose-connect-group
      CONFIG_STORAGE_TOPIC: docker-connect-configs
      OFFSET_STORAGE_TOPIC: docker-connect-offsets
      STATUS_STORAGE_TOPIC: docker-connect-status
      ENABLE_SCHEMA_CONVERTERS: "true"
      KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false" # Disable schema validation
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false" # Disable schema validation
      LOG4J_ROOT_LOGLEVEL: "INFO"
      LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONFIG_STORAGE_REPLICATION_FACTOR: "3"
      OFFSET_STORAGE_REPLICATION_FACTOR: "3"
      STATUS_STORAGE_REPLICATION_FACTOR: "3"
      OFFSET_FLUSH_INTERVAL_MS: 60000
      PLUGIN_PATH: '/usr/share/java'
    healthcheck:
      test: [ "CMD", "curl http://connect:8083/connectors" ]
      interval: 10s
      timeout: 5s
      retries: 5

  debezium-ui:
    image: debezium/debezium-ui:latest
    restart: always
    container_name: debezium-ui
    hostname: debezium-ui
    depends_on:
      - connect
    ports:
      - '8080:8080'
    environment:
      KAFKA_CONNECT_URIS: http://connect:8083

  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=poc-db
    command: [ 'postgres', '-c', 'wal_level=logical' ]
    healthcheck:
      test: [ 'CMD', 'psql', '-U', 'postgres', '-c', 'SELECT 1' ]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka-0-data:
    driver: local
  kafka-1-data:
    driver: local
  kafka-2-data:
    driver: local
  postgres_data:
    driver: local